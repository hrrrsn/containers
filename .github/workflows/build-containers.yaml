name: Build containers

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
  workflow_dispatch:
    inputs:
      container:
        description: 'Container directory to build'
        required: false

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Prepare and Set Matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.container }}" != "" ]]; then
            dirs="${{ github.event.inputs.container }}"
          else
            dirs=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'docker/' | awk -F/ '{print $2}' | uniq)
          fi
          matrix_entries=()
          for dir in $dirs; do
            image_name=$(grep 'FROM' ./docker/$dir/Dockerfile | awk '{print $2}' | head -n 1)
            manifest=$(docker manifest inspect $image_name || echo "{}")
            has_arm64=$(echo "$manifest" | jq -r '.manifests[]?.platform.architecture // empty' | grep -q 'arm64' && echo 'true' || echo 'false')
            archs='["linux/amd64"]'
            if [[ $has_arm64 == "true" ]]; then
              archs='["linux/amd64", "linux/arm64"]'
            fi
            matrix_entry="{\"dir\": \"$dir\", \"platforms\": $archs}"
            matrix_entries+=("$matrix_entry")
          done
          matrix="{\"include\": [$(IFS=,; echo "${matrix_entries[*]}")]}"
          echo "Matrix: $matrix"
          echo "::set-output name=matrix::$matrix"

  build:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.prepare-matrix.outputs.matrix).include }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract base image tag from Dockerfile
        id: extract-info
        run: |
          base_image=$(grep FROM docker/${{ matrix.container.dir }}/Dockerfile | awk '{print $2}' | head -n 1)
          base_image_tag=$(echo "$base_image" | awk -F':' '{print $2}' | awk -F'@' '{print $1}')
          if [ -z "$base_image_tag" ]; then
            base_image_tag="latest"
          fi
          echo "BASE_IMAGE_TAG=$base_image_tag" >> $GITHUB_ENV
          echo "BASE_IMAGE_TAG: $base_image_tag"
          commit_hash=$(echo "$base_image" | awk -F'@' '{print $2}' | cut -c 1-8)
          echo "COMMIT_HASH=$commit_hash" >> $GITHUB_ENV
          echo "COMMIT_HASH: $commit_hash"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./docker/${{ matrix.container.dir }}
          push: true
          platforms: ${{ join(matrix.container.platforms, ',') }}
          tags: ghcr.io/${{ github.repository }}/${{ matrix.container.dir }}:temp

      - name: Determine dynamic tag
        id: dynamic-tag
        run: |
          if [[ -f ./docker/${{ matrix.container.dir }}/tag-stream ]]; then
            tag_command=$(cat ./docker/${{ matrix.container.dir }}/tag-stream)
            container_id=$(docker create ghcr.io/${{ github.repository }}/${{ matrix.container.dir }}:temp)
            docker start $container_id
            tag=$(docker exec $container_id $tag_command)
            echo "DYNAMIC_TAG=$tag" >> $GITHUB_ENV
            echo "DYNAMIC_TAG: $tag"
            docker rm -f $container_id
          else
            echo "DYNAMIC_TAG=" >> $GITHUB_ENV

      - name: Tag and push Docker images
        run: |
          image_name="ghcr.io/${{ github.repository }}/${{ matrix.container.dir }}"
          temp_tag="${image_name}:temp"
          base_image_tag="${image_name}:${{ env.BASE_IMAGE_TAG }}"
          latest_tag="${image_name}:latest"

          docker pull $temp_tag

          docker tag $temp_tag $base_image_tag
          docker tag $temp_tag $latest_tag

          if [[ -n "${{ env.DYNAMIC_TAG }}" ]]; then
            dynamic_tag="${image_name}:${{ env.DYNAMIC_TAG }}"
            dynamic_base_tag="${dynamic_tag}-${{ env.BASE_IMAGE_TAG }}"
            docker tag $temp_tag $dynamic_tag
            docker tag $temp_tag $dynamic_base_tag
          fi

          docker push $base_image_tag
          docker push $latest_tag

          if [[ -n "${{ env.DYNAMIC_TAG }}" ]]; then
            docker push $dynamic_tag
            docker push $dynamic_base_tag

          docker rmi $temp_tag

      - name: Clean up Docker images
        run: docker image prune -f
