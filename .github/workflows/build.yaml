name: Rebuild Containers

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
  workflow_dispatch:
    inputs:
      directory:
        description: 'Container directory to rebuild (leave blank for all)'
        required: false
        default: 'all'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Prepare and Set Matrix
        id: set-matrix
        run: |
          matrix=""
          directories=${{ github.event.inputs.directory }}
          if [[ "$directories" == "all" ]]; then
            directories=$(ls docker/)
          fi
          for dir in $directories; do
            if [[ -d "docker/$dir" ]]; then
              image_name=$(grep 'FROM' ./docker/$dir/Dockerfile | awk '{print $2}' | head -n 1)
              manifest=$(docker manifest inspect $image_name || echo "{}")
              has_arm64=$(echo "$manifest" | jq -r '.manifests[]?.platform.architecture // empty' | grep -q 'arm64' && echo 'true' || echo 'false')
              archs='"amd64"'
              matrix_entry="{\"dir\": \"$dir\", \"arch\": [$archs]}"
              matrix="${matrix}${matrix:+,}${matrix_entry}"
            fi
          done
          matrix="{\"include\": [$matrix]}"
          echo "Matrix: $matrix"
          echo "::set-output name=matrix::$matrix"
        
  build:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract base image tag from Dockerfile
        run: |
          echo "BASE_IMAGE_TAG=$(grep FROM docker/${{ matrix.dir }}/Dockerfile | awk -F':' '{print $2}' | awk -F'@' '{print $1}')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(grep FROM docker/${{ matrix.dir }}/Dockerfile | cut -d':' -f3 | cut -c 1-8)" >> $GITHUB_ENV
      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine Next Semantic Version
        id: semver
        run: |
          image_name="ghcr.io/${{ github.repository }}/${{ matrix.dir }}"
          tags=$(ghcr-cli list tags --image $image_name)
          latest_semver=$(echo "$tags" | grep -oP '1\.\d+' | sort -V | tail -n1)
          if [ -z "$latest_semver" ]; then
            echo "::set-output name=next_version::1.0"
          else
            next_patch=$(echo $latest_semver | awk -F. '{$NF+=1; print $0}' OFS='.')
            echo "::set-output name=next_version::$next_patch"
          fi
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./docker/${{ matrix.dir }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ steps.semver.outputs.next_version }}
            ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ GITHUB_SHA }}
            ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ env.BASE_IMAGE_TAG }}-${{ env.COMMIT_HASH }}
           
