name: Rebuild Containers

on:
  workflow_dispatch:
    inputs:
      directory:
        description: 'Container directory to rebuild'
        required: false
        default: 'all'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Prepare and Set Matrix
        id: set-matrix
        run: |
          matrix=""
          directories=${{ github.event.inputs.directory }}
          if [[ "$directories" == "all" ]]; then
            directories=$(ls docker/)
          fi
          for dir in $directories; do
            if [[ -d "docker/$dir" ]]; then
              image_name=$(grep 'FROM' ./docker/$dir/Dockerfile | awk '{print $2}' | head -n 1)
              manifest=$(docker manifest inspect $image_name || echo "{}")
              has_arm64=$(echo "$manifest" | jq -r '.manifests[]?.platform.architecture // empty' | grep -q 'arm64' && echo 'true' || echo 'false')
              archs='"amd64"'
              matrix_entry="{\"dir\": \"$dir\", \"arch\": [$archs]}"
              matrix="${matrix}${matrix:+,}${matrix_entry}"
            fi
          done
          matrix="{\"include\": [$matrix]}"
          echo "Matrix: $matrix"
          echo "::set-output name=matrix::$matrix"
        
  build:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:master,network=host

      - name: Extract base image tag from Dockerfile
        run: |
          echo "BASE_IMAGE_TAG=$(grep FROM docker/${{ matrix.dir }}/Dockerfile | awk -F':' '{print $2}' | awk -F'@' '{print $1}')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(grep FROM docker/${{ matrix.dir }}/Dockerfile | cut -d':' -f3 | cut -c 1-8)" >> $GITHUB_ENV

      - name: Docker Login
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5.4.0
        with:
            context: ./docker/${{ matrix.dir }}
            push: false
            platforms: ${{ matrix.platforms }}
            load: true
            tags: ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }}

      - name: Determine Tag
        id: dynamic-tag
        run: |
          if [[ -f ./docker/${{ matrix.dir }}/tag-stream ]]; then
            tag_command=$(cat ./docker/${{ matrix.dir }}/tag-stream)
            container_id=$(docker create ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }})
            docker start $container_id
            tag=$(docker exec $container_id $tag_command)
            echo "::set-output name=dynamic_tag::$tag"
            echo "Tag: $tag"
            docker rm -f $container_id
          fi

      - name: Push Docker image
        run: |
          if [[ -f ./docker/${{ matrix.dir }}/tag-stream ]]; then
            docker tag ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }} ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ steps.dynamic-tag.outputs.dynamic_tag }}
            docker tag ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }} ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ steps.dynamic-tag.outputs.dynamic_tag }}-${{ env.BASE_IMAGE_TAG }}
          fi

          docker tag ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }} ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ env.BASE_IMAGE_TAG }}
          docker tag ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }} ghcr.io/${{ github.repository }}/${{ matrix.dir }}:latest
          docker rmi ghcr.io/${{ github.repository }}/${{ matrix.dir }}:${{ github.run_id }}
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository }}/${{ matrix.dir }} --all-tags